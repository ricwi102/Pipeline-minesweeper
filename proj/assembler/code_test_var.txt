MOVE R1, 0;
MOVE R2, 192;

START_VALUES:				-- Sätt standardvärden till DM 
STORE R1, R2, 0;
ADD R1, R1, 1; 
CMP R1, 300;
BNE START_VALUES;
NOP;
JMP DUMMY1;
NOP;

PLACE_BOMB: ; 								-- R6 = X , R7 = Y
MULT R1, R7, 20; 							-- pos for RÖJ
ADD R1, R6, R1; 							-- ADD X + Y TO REGISTER 3
LOAD R2, R1, 0;               --POS FOR BOMB IS IN R1
BTST R2, 4;
BNE DUMMY;
NOP;
ADD R2, R2, 16;
STORE R1, R2, 0;


MOVE R11, 3;  -- Hur många loops i y-led
MOVE R12, 1;	-- Startpos (minus) i y-led relativt nuvarande

CMP R7, 0;		-- Övre border
BNER 4;
NOP;
MOVE R11, 2;
MOVE R12, 0;

CMP R7, 14;		-- Undre border
BNER 3;
NOP;
MOVE R11, 2;

SUB R12, R7, R12;		-- Loop start position (y-led)
ADD R11, R11, R12;  -- Loop slut position  (y-led)

MOVE R13, 3;  -- Hur många loops i x-led
MOVE R14, 1;	-- Startpos (minus) i x-led relativt nuvarande

CMP R6, 0;		-- Vänster border
BNER 4;
NOP;
MOVE R13, 2;
MOVE R14, 0;

CMP R6, 19 ;	-- Höger border
BNER 3;
NOP;
MOVE R13, 2;

SUB R14, R6, R14;		-- Loop start position (X-led)
ADD R13, R13, R14;	-- Loop slut position  (X-led)

; R14 -> nuvarande x pos, R13 -> slut pos
; R12 -> nuvarande y pos, R11 -> slut pos

LOOP_NUM:      

ADD R15, R14, 0;

LOOP_NUM2:
MULT R1, R12, 20; 							-- pos for RÖJ
ADD R1, R15, R1; 							-- ADD X + Y TO REGISTER 3

LOAD R2, R1, 0; 
ADD R2, R2, 1;
STORE R1, R2, 0;

ADD R15, R15, 1;
CMP R15, R13;
BNE LOOP_NUM2;
NOP;

ADD R12, R12, 1;
CMP R12, R11;
BNE LOOP_NUM;
NOP

JMP DUMMY;
NOP;

DUMMY1:
MOVE R7, 5;
MOVE R6, 0;
DUMMY:
ADD R6, R6, 1;
CMP R6, 20;
BNE PLACE_BOMB;
NOP;
JMP GAME_LOOP;
NOP;

GAME_LOOP:
MOVE R10, 0;
GAME_LOOP1:
CMP R10, 4; 									-- CHECK D
BEQ INSTR_D; 											-- IF NOT, CHECK A
NOP;
CMP R10, 2; 									-- CHECK A
BEQ INSTR_A; 											-- IF NOT, CHECK W
NOP;
CMP R10, 1; 									-- CHECK W
BEQ INSTR_W; 											-- IF NOT, CHECK S
NOP;
CMP R10, 3; 									-- CHECK S
BEQ INSTR_S; 											-- IF NOT, CHECK Q
NOP;
CMP R10, 5; 									-- CHECK QUESTIONMARK
BEQ INSTR_Q; 											-- IF NOT, CHECK E 
NOP;
CMP R10, 6; 									-- CHECK E
BEQ INSTR_E; 											-- IF NOT, CHECK R 
NOP;
CMP R10, 7;										-- CHECK R
BEQ INSTR_R;
NOP;
JMP GAME_LOOP1;

INSTR_D:
CMP R8, 19; 									-- CHECK IF LAST X-POS
BEQR 4; 											-- IF LAST GO BACK TO FIRST X-POS
ADD R8, R8, 1;								-- OTHERWISE MOVE RIGHT
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;
MOVE R8, 0;										-- MOVE BACK TO FIRST X-POS
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;

INSTR_A:
CMP R8, 0; 										-- CHECK IF FIRST X-POS
BEQR 4; 											-- IF FIRST GO TO LAST X-POS
SUB R8, R8, 1; 								-- OTHERWISE MOVE LEFT
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;
MOVE R8, 19; 									-- MOVE MARKER TO LAST X-POS
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;

INSTR_W:
CMP R9, 0; 										-- CHECK IF FIRST Y-POS
BEQR 4; 											-- IF FIRST GO TO LAST Y-POS
SUB R9, R9, 1; 								-- OTHERWISE MOVE UP
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;
MOVE R9, 14; 									-- MOVE MARKER TO LAST Y-POS
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;

INSTR_S:
CMP R9, 14; 									-- CHECK IF LAST Y-POS
BEQR 4; 											-- IF LAST GO TO FIRST Y-POS
ADD R9, R9, 1; 								-- OTHERWISE MOVE DOWN
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;
MOVE R9, 0; 									-- MOVE MARKER TO FIRST Y-POS
JMP GAME_LOOP;												-- JUMP TO TOP

INSTR_Q:;------------------ MOVEMENT ENDS / ACTIONS START HERE --------------------------
MULT R1, R9, 20; 							-- pos for flag
ADD R2, R8, R1; 							-- ADD X + Y TO REGISTER 3
MOVE R1, 10;									-- QM TO REGISTER?
GSTORE R2, R1, 0; 						-- GSTORE IT
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;

INSTR_E:
MULT R1, R9, 20; 							-- pos for flag
ADD R2, R8, R1; 							-- ADD X + Y TO REGISTER 3
MOVE R1, 9;										-- FLAG TO REGISTER?
GSTORE R2, R1, 0; 						-- GSTORE IT 
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;

INSTR_R:
MULT R1, R9, 20; 							-- pos for RÖJ
ADD R2, R8, R1; 							-- ADD X + Y TO REGISTER 3
LOAD R3, R2, 0;								-- LOAD TILE DATA FROM DM TO R3
AND R4, R3, 63;
BTST R4, 4;										-- CHECK FOR BOMB
BNE BOMB_HERE;
NOP;
GSTORE R2, R4, 0;
STORE R2, R4, 0;
JMP GAME_LOOP;
NOP;
BOMB_HERE:
MOVE R1, 11;
GSTORE R2, R1, 0;
JMP GAME_LOOP;
NOP;





