MOVE R1, 0;
MOVE R2, 192;


START_VALUES:				-- Sätt standardvärden till DM 
STORE R1, R2, 0;
ADD R1, R1, 1; 
CMP R1, 300;
BNE START_VALUES;
NOP;
JMP DUMMY1;
NOP;

PLACE_BOMB: ; 								-- R6 = X , R7 = Y
MULT R1, R7, 20; 							-- pos for RÖJ
ADD R1, R6, R1; 							-- ADD X + Y TO REGISTER 3
LOAD R2, R1, 0;               --POS FOR BOMB IS IN R1
BTST R2, 4;
BNE DUMMY;
NOP;
ADD R2, R2, 16;
STORE R1, R2, 0;
SUB R5, R5, 1;		

MOVE R11, 3;  -- Hur många loops i y-led
MOVE R12, 1;	-- Startpos (minus) i y-led relativt nuvarande

CMP R7, 0;		-- Övre border
BNER 4;
NOP;
MOVE R11, 2;
MOVE R12, 0;

CMP R7, 14;		-- Undre border
BNER 3;
NOP;
MOVE R11, 2;

SUB R12, R7, R12;		-- Loop start position (y-led)
ADD R11, R11, R12;  -- Loop slut position  (y-led)

MOVE R13, 3;  -- Hur många loops i x-led
MOVE R14, 1;	-- Startpos (minus) i x-led relativt nuvarande

CMP R6, 0;		-- Vänster border
BNER 4;
NOP;
MOVE R13, 2;
MOVE R14, 0;

CMP R6, 19 ;	-- Höger border
BNER 3;
NOP;
MOVE R13, 2;

SUB R14, R6, R14;		-- Loop start position (X-led)
ADD R13, R13, R14;	-- Loop slut position  (X-led)

; R14 -> nuvarande x pos, R13 -> slut pos
; R12 -> nuvarande y pos, R11 -> slut pos

LOOP_NUM:      

ADD R15, R14, 0;

LOOP_NUM2:
MULT R1, R12, 20; 							-- pos for RÖJ
ADD R1, R15, R1; 							-- ADD X + Y TO REGISTER 3

LOAD R2, R1, 0; 
ADD R2, R2, 1;
STORE R1, R2, 0;

ADD R15, R15, 1;
CMP R15, R13;
BNE LOOP_NUM2;
NOP;

ADD R12, R12, 1;
CMP R12, R11;
BNE LOOP_NUM;
NOP

JMP DUMMY;
NOP;

DUMMY1:
MOVE R7, R17;
MOVE R6, R16;
MOVE R5, 50;
DUMMY:
ADD R6, R6, R16;							--GENERERA NYA X OCH Y
XOR R6, R6, 12;
ADD R7, R7, R17;
XOR R7, R7, 7;

;CMP R6, 0;
;BGRR 3;
;NOP;
;ADD R6, R6, 19;

;CMP R7, 0;
;BGRR 3;
;NOP;
;ADD R7, R6, 14;


AND R6, R6, 31
CMP R6, 19;
BNGR 3;
NOP;
SUB R6, R6, 12;

AND R7, R7, 15;
CMP R7, 14;
BNGR 3;
NOP;
SUB R7, R7, 14;

CMP R5, 0;
BNE PLACE_BOMB;
NOP;
JMP GAME_LOOP;
NOP;

GAME_LOOP:
MOVE R10, 0;
GAME_LOOP1:
CMP R10, 4; 									-- CHECK D
BEQ INSTR_D; 											-- IF NOT, CHECK A
NOP;
CMP R10, 2; 									-- CHECK A
BEQ INSTR_A; 											-- IF NOT, CHECK W
NOP;
CMP R10, 1; 									-- CHECK W
BEQ INSTR_W; 											-- IF NOT, CHECK S
NOP;
CMP R10, 3; 									-- CHECK S
BEQ INSTR_S; 											-- IF NOT, CHECK Q
NOP;
CMP R10, 5; 									-- CHECK QUESTIONMARK
BEQ INSTR_Q; 											-- IF NOT, CHECK E 
NOP;
CMP R10, 6; 									-- CHECK E
BEQ INSTR_E; 											-- IF NOT, CHECK R 
NOP;
CMP R10, 7;										-- CHECK R
BEQ INSTR_R;
NOP;
JMP GAME_LOOP1;

INSTR_D:
CMP R8, 19; 									-- CHECK IF LAST X-POS
BEQR 4; 											-- IF LAST GO BACK TO FIRST X-POS
ADD R8, R8, 1;								-- OTHERWISE MOVE RIGHT
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;
MOVE R8, 0;										-- MOVE BACK TO FIRST X-POS
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;

INSTR_A:
CMP R8, 0; 										-- CHECK IF FIRST X-POS
BEQR 4; 											-- IF FIRST GO TO LAST X-POS
SUB R8, R8, 1; 								-- OTHERWISE MOVE LEFT
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;
MOVE R8, 19; 									-- MOVE MARKER TO LAST X-POS
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;

INSTR_W:
CMP R9, 0; 										-- CHECK IF FIRST Y-POS
BEQR 4; 											-- IF FIRST GO TO LAST Y-POS
SUB R9, R9, 1; 								-- OTHERWISE MOVE UP
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;
MOVE R9, 14; 									-- MOVE MARKER TO LAST Y-POS
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;

INSTR_S:
CMP R9, 14; 									-- CHECK IF LAST Y-POS
BEQR 4; 											-- IF LAST GO TO FIRST Y-POS
ADD R9, R9, 1; 								-- OTHERWISE MOVE DOWN
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;
MOVE R9, 0; 									-- MOVE MARKER TO FIRST Y-POS
JMP GAME_LOOP;												-- JUMP TO TOP

INSTR_Q:;------------------ MOVEMENT ENDS / ACTIONS START HERE --------------------------
MULT R1, R9, 20; 							-- pos for flag
ADD R2, R8, R1; 							-- ADD X + Y TO REGISTER 3
LOAD R3, R2, 0;
CMP R3, 63;										-- KOLA OM RÖJD
BNG GAME_LOOP;
NOP;
BTST R3, 7;										-- KOLLA OM REDAN FRÅGETECKEN
BNER 7;
NOP;
MOVE R1, 12;
GSTORE R2, R1, 0;
ADD R3, R3, 128;
STORE R2, R3, 0;
JMP GAME_LOOP;
NOP;
MOVE R1, 10;									-- QM TO REGISTER
GSTORE R2, R1, 0; 						-- GSTORE IT
SUB R3, R3, 128;
BTST R3, 6;										-- KOLLA OM FLAGGA
BNER 3;
NOP;
ADD R3, R3, 64;
STORE R2, R3, 0;  
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;

INSTR_E:
MULT R1, R9, 20; 							-- pos for flag
ADD R2, R8, R1; 							-- ADD X + Y TO REGISTER 3
LOAD R3, R2, 0;								
CMP R3, 63;										-- KOLLA OM RÖJD
BNG GAME_LOOP;
NOP;
BTST R3, 6;										-- KOLLA OM REDAN FLAGGAD
BNER 7;
NOP;
MOVE R1, 12;
GSTORE R2, R1, 0;
ADD R3, R3, 64;
STORE R2, R3, 0;
JMP GAME_LOOP;
NOP;
MOVE R1, 9;										-- FLAG TO REGISTER?
GSTORE R2, R1, 0; 						-- GSTORE IT
SUB R3, R3, 64;
BTST R3, 7;										-- KOLLA OM FRÅGETECKEN
BNER 3;
NOP;
ADD R3, R3, 128;
STORE R2, R3, 0;  
JMP GAME_LOOP;												-- JUMP TO TOP
NOP;


INSTR_R:     -----  INSTRUCTION R  -------------
MULT R1, R9, 20; 							-- pos for RÖJ
ADD R2, R8, R1; 							-- ADD X + Y TO REGISTER 3
LOAD R3, R2, 0;								-- LOAD TILE DATA FROM DM TO R3
BTST R3, 5;
BNE GAME_LOOP;
NOP;						
		
AND R4, R3, 31;
BTST R4, 4;										-- CHECK FOR BOMB
BNE BOMB_HERE;
NOP;

GSTORE R2, R4, 0;
ADD R4, R4, 32;
STORE R2, R4, 0;
CMP R4, 32;
BEQ SPREAD;
NOP;

JMP GAME_LOOP;
NOP;
BOMB_HERE:
MOVE R1, 11;
;ADD R3, R3, 32;
;STORE R2, R3, 0;
GSTORE R2, R1, 0;
;MOVE R8, 0;
;MOVE R9, 0;
JMP GAME_LOOP;
NOP;


GAME_OVER:
ADD R8, R8, R10;
ADD R9, R9, R11;
MULT R1, R9, 20; 							-- pos for RÖJ
ADD R2, R8, R1; 							-- ADD X + Y TO REGISTER 3
LOAD R3, R2, 0;								-- LOAD TILE DATA FROM DM TO R3
AND R4, R3, 31;
BTST R4, 4;										-- CHECK FOR BOMB
BEQ GAME_OVER;
NOP;
ADD R5, R5, 1;
MOVE R4, 11;
GSTORE R2, R4, 0;
JMP GAME_OVER;
NOP;





;---------------------SPREAD------------------------

	;; R8 => X
	;; R9 => Y
	;; QUEUE => DM(400)

SPREAD:
MOVE R5, 400			;STARTPOS I QUEUE = 400
MOVE R4, 400 			;QUEUE-SIZE
ADD R6, R8, 0			;TEMP X
ADD R7, R9, 0			;TEMP Y


SPREAD_MLOOP:	

MOVE R11, 3;  				-- Hur många loops i y-led
MOVE R12, 1;					-- Startpos (minus) i y-led relativt nuvarande

CMP R7, 0;						-- Övre border: Kolla om Y-pos  är 0.
BNER 4;								-- Hoppa 4 steg ner.
NOP;	
MOVE R11, 2;					--Om Y-pos=0 ändra loopen till 2.
MOVE R12, 0;					--Hoppa upp 0 steg pga border.

CMP R7, 14;						-- Undre border
BNER 3;
NOP;
MOVE R11, 2;

SUB R12, R7, R12;			-- Loop start position (y-led)
ADD R11, R11, R12; 		-- Loop slut position  (y-led)

MOVE R13, 3;   				-- Hur många loops i x-led
MOVE R14, 1;					-- Startpos (minus) i x-led relativt nuvarande

CMP R6, 0;						-- Vänster border
BNER 4;
NOP;
MOVE R13, 2;
MOVE R14, 0;

CMP R6, 19 ;				-- Höger border
BNER 3;
NOP;
MOVE R13, 2;

SUB R14, R6, R14;		-- Loop start position (X-led)
ADD R13, R13, R14;		-- Loop slut position  (X-led)

; R14 -> nuvarande x pos, R13 -> slut pos
; R12 -> nuvarande y pos, R11 -> slut pos

LOOP_SPREAD:      

ADD R15, R12, 0;

LOOP_SPREAD2:
MULT R1, R15, 20; 		Sätter pos i DM
ADD R1, R14, R1	;		--||--


LOAD R2, R1, 0;			ladda in rutan till R2.
BTST R2, 5    ;			Kollar visited-biten.
BNE SPREAD_SKIP2;
NOP;
AND R3, R2, 31			;Behåller sifferkoden enbart.

CMP R3, 0						;Kolla om det är en tom ruta.
BNE SPREAD_SKIP1		;
NOP				;
CMP R15, 0;
BNG SPREAD_SKIP2;
NOP;
STORE R4, R14, 0 		;Lägger X-pos i kön
STORE R4, R15, 1 		;Lägger y-pos i kön
ADD R4, R4, 2				;Ökar queue-size

SPREAD_SKIP1:			

GSTORE R1, R3, 0		;Skriver in siffran i grafikminnet.
ADD R3, R3, 32			;Sätter visited-biten.
STORE R1, R3, 0			;Röjer och sätter visited.

SPREAD_SKIP2:	
ADD R15, R15, 1;		Hoppa 1 i X-led.
CMP R15, R11;				Kolla om Den hoppat klart i x-led.
BNE LOOP_SPREAD2;		Hoppa till loop över X.
NOP;

ADD R14, R14, 1;		Ökar Y med 1.
CMP R14, R13;				Kollar om Y är Y-max.
BNE LOOP_SPREAD;
NOP	       ;

CMP R4, R5				;Kolla om botten och taket är samma
BEQ GAME_LOOP			;Kön är slut, allt är spreadat.
NOP				;

LOAD R6, R5, 0			;
LOAD R7, R5, 1			;
ADD R5, R5, 2			;
JMP SPREAD_MLOOP		;
NOP				;


